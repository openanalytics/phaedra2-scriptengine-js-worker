pipeline {

    agent {
        kubernetes {
            inheritFrom 'kaniko'
            yamlFile 'kubernetesPod.yaml'
            yamlMergeStrategy merge()
        }
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '3'))
    }

    parameters {
        string(name: 'BUILD_TYPE', defaultValue: 'default')
    }

    stages {
        stage('Initialize') {
		    when {
			    branch 'master'
                expression { params.BUILD_TYPE != 'product_release' }
            }
            steps {
                script { currentBuild.result = 'ABORTED' }
                error 'Build of the master branch can only be invoked as part of the product_release'
            }
	    }
        
        stage('Prepare environment') {
            steps {
                script {
                    def packageJson = readJSON file: './package.json'
                    env.ARTIFACT_ID = packageJson.name
                    env.VERSION = packageJson.version
                    env.REGISTRY = "registry.openanalytics.eu"
                    env.REPO = "openanalytics/${env.ARTIFACT_ID}"
                    env.PHA2_SHARED_CACHE="phaedra2-shared-cache"
                    def versionMatch = (env.VERSION =~ /\d+\.\d+\.\d+(.*)/)
                    env.REPO_SUFFIX = (versionMatch.matches() ? versionMatch.group(1) : "").toLowerCase()
                    env.TAG = "${env.VERSION}"
                    def shouldPublish = (env.BRANCH_NAME == 'master' || env.BRANCH_NAME == 'develop')
                    env.PUSH_ARG = shouldPublish ? "" : "--no-push"
                }
            }
        }

        stage('Build Docker App image') {
            steps {
                container('kaniko'){
                    sh """
                    /kaniko/executor \
                            -v info \
                            --context ${env.WORKSPACE} \
                            --cache=true \
                            --cache-repo ${env.REGISTRY}/${env.PHA2_SHARED_CACHE} \
                            --destination ${env.REGISTRY}/${env.REPO}${env.REPO_SUFFIX}:${env.TAG} \
                            --destination ${env.REGISTRY}/${env.REPO}${env.REPO_SUFFIX}:latest \
                            ${env.PUSH_ARG} --dockerfile Dockerfile
                    """
                }
            }
        }
    }
}
